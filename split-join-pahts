#Python Managing Files and Directories
#Python can used strings (binary or otherwise) to represent paths.
#os.path modules offers path related methods for creating and manipulating "paths as strings"
#os.path is one of the most widely used functionality. It gives the abiliy to split and join paths 

#SECTION I: SPLIT PATH:

#There are 3 methods used to split paths:
  #1.0. split = os.path.split(cur_dir)
        e.g. 
      In [23]: os.path.split(cur_dir)
      Out[23]: ('/home', 'user1')

      #above we ca see that the current direct pathname /home/user1 has been split into strings ('/home', 'user1')

  #2.0. dirname = os.path.dirname(cur_dir)
      In [24]: os.path.dirname(cur_dir)
      Out[24]: '/home'

      #above we can see that eventhough our current directory is /home/user1 the os.path.dirname shows only the parent directory name '/home'

  #basename = os.path.basename(cur_dir)

    In [25]: os.path.basename(cur_dir)
    Out[25]: 'user1'
    
    #the above command is the converse of os.path.dirname = Parent Dir Name only. Where as os.path.basename = Shows only the leaf directory name 
    #not the complete path not even the parent directory name
    
    #you can sasily use os.path.dir name to walk up a directory tree, using the following code:
    
    In [26]: while os.path.basename(cur_dir):
    ...:     cur_dir = os.path.dirname(cur_dir)
    ...:     print(cur_dir)
    ...: 
/home
/


#SECTION II JOIN PATH AND VARIABLES:
#EXPANDING PATHS:
#Using files to configure an application at runtime is a common practie
#Files in Unix-like systems are named by  convension as 'dotfiles' ending with 'rc'
#e.g. Bash shell's .bashrc
#You can store these files in different locations. Often programss will define a hierarchy of locations to check
#e.g. your tool might look forst for an environment variable that defines the rc file to use and in its absence, check the working directory if not there
#then check the user's home directory. We try to locate an rc file in these locations
#we use the 'file' varoan;e that Python automatically sets when Python code runs from a file. This variable is populated with the
#path relative to the current working ditrecoty, not an absolute or full path
#Also Python does not automatically expand paths, as is common in  Unix-like systems, 
#so we must expand this path bofore we use it to construct the path to check our rc file. 

#EXPANDING VARIALES:
#Python does not automatically expand environment varibales in paths, so we must expand these explicitly. The process is as follows:

# 1.0. Check whether the environment varibale exists in the current environment

def find_rc(rc_name=".examplerc"):     

  #Check for Env variable
  var_name = "EXAMPLERC_DIR"
  if var_nme in os.environ: #1. Check whether the environment variable exists in the current environment
  
  var_path = os.path.join(f"${rc_name}", rc_name) #2.0. Use 'join' to construct a path with the environment varible name. 
                                                  #This will look like $EXAMPLERC_DIR/.examplerc
  
  



